/*
@CRYPT_STRING_BASE64HEADER 0x00000000,
@CRYPT_STRING_BASE64 0x00000001,
@CRYPT_STRING_BINARY 0x00000002,
@CRYPT_STRING_BASE64REQUESTHEADER 0x00000003,
@CRYPT_STRING_HEX 0x00000004,
@CRYPT_STRING_HEXASCII 0x00000005,
@CRYPT_STRING_BASE64_ANY 0x00000006,
@CRYPT_STRING_ANY 0x00000007,
@CRYPT_STRING_HEX_ANY 0x00000008,
@CRYPT_STRING_BASE64X509CRLHEADER 0x00000009,
@CRYPT_STRING_HEXADDR 0x0000000a,
@CRYPT_STRING_HEXASCIIADDR 0x0000000b,
@CRYPT_STRING_HEXRAW 0x0000000c,
@CRYPT_STRING_BASE64URI 0x0000000d,
@CRYPT_STRING_ENCODEMASK 0x000000ff,
@CRYPT_STRING_RESERVED100 0x00000100,
@CRYPT_STRING_RESERVED200 0x00000200,
@CRYPT_STRING_PERCENTESCAPE 0x08000000,
@CRYPT_STRING_HASHDATA 0x10000000,
@CRYPT_STRING_STRICT 0x20000000,
@CRYPT_STRING_NOCRLF 0x40000000,
@CRYPT_STRING_NOCR 0x80000000
*/
MCode(str, format := 4) {
    if DllCall("crypt32\CryptStringToBinary", "str", str, "uint", 0, "uint", format, "ptr", 0, "uint*", &bytes := 0, "ptr", 0, "ptr", 0)
        && DllCall("crypt32\CryptStringToBinary", "str", str, "uint", 0, "uint", format, "ptr", code := Buffer(bytes), "uint*", &bytes, "ptr", 0, "ptr", 0)
        && DllCall("VirtualProtect", "ptr", code, "uint", bytes, "uint", 0x40, "uint*", 0)
        return DllCall.Bind(code)
    throw OSError()
}
